<?php

/**
 *              ** AiryDB **
 *
 * @since 4 Dec, 2018
 * @version 0.14 - 5 Dec 2018
 * @author SkywalkerFR <@SkywalkerFR on twitter>
 *
 * https://stackoverflow.com/questions/16698386/using-string-path-to-delete-element-from-array
 * https://stackoverflow.com/questions/9628176/using-a-string-path-to-set-nested-array-data
 */





/**
* db_sysname funct.
*
* Return the database's path
*
* @param  string 	$db_name 	a database's name
* @return string 				database's path
*
*/
function db_sysname($db_name) {
	return('db/'.$db_name.'.db');
}




/**
* db_exist funct.
*
* Return if a database exists
*
* @param  string 	$db_name 	a database's name
* @return boolean
*
*/
function db_exist($db_name) {
	if (file_exists(db_sysname($db_name))) {
		return(True);
	} else {
		return(False);
	}
}




/**
* db_create funct.
*
* Create a database
*
* @param  string 	$db_name 	a database's name
* @return boolean
*
*/
function db_create($db_name) {
	if (!db_exist($db_name)) {
		if (!is_dir('db')) {
			if (!mkdir('db', 0755)) {
				return(False);
			}
		}
		file_put_contents(db_sysname($db_name), serialize(array()), LOCK_EX);
		if (!db_exist($db_name)) {
			return(False);
		}
		if (!chmod(db_sysname($db_name), 0777)) {
			return(False);
		}
		return(True);
	} else {
		return(False);
	}
}




/**
* db_delete funct.
*
* Delete a database
*
* @param  string 	$db_name 	a database's name
* @return boolean
*
*/
function db_delete($db_name) {
	if (db_exist($db_name)) {
		unlink(db_sysname($db_name));
		return(True);
	} else {
		return(False);
	}
}




/**
* db_reset funct.
*
* Reset a database (delete all content in the database)
*
* @param  string 	$db_name 	a database's name
* @return boolean
*
*/
function db_reset($db_name) {
	if (db_exist($db_name)) {
		file_put_contents(db_sysname($db_name), serialize(array()), LOCK_EX);
		return(True);
	} else {
		return(False);
	}
}




/**
* db_get_all funct.
*
* Get all database's content in an array
*
* @param  string 	$db_name 	a database's name
* @return array or boolean
*
*/
function db_get_all($db_name) {
	if (db_exist($db_name)) {
		return(unserialize(file_get_contents(db_sysname($db_name))));
	} else {
		return(False);
	}
}



/**
* db_get_value funct.
*
* Query a value in a database
*
* @param  string 	$db_name 	a database's name
* @param  string 	$path 		path like /dir/dir2/test
* @param  string 	$name 		name associated to the value
* @return string or boolean
*
*/
function db_get_value($db_name, $path = NULL, $name) {

	if ($name == ''){
		return(False);
	}

	if (db_exist($db_name)) {

		$db_contenu = db_get_all($db_name);

		if (is_array($db_contenu)) {
			
			if ($path == NULL) {
				$sub_array = $db_contenu[$name];

			} else {

				if (substr($path, -1) == '/') {
					$path = substr($path, 0, -1);
				}
				if ($path['0'] == '/') {
					$path = substr($path, 1);
				}

				$path .= '/'.$name;
				$path = explode('/', $path);
				$sub_array = '';
				foreach ($path as $dir) {

					if (empty($sub_array)) {
						if (isset($db_contenu[$dir])) {
							$sub_array = $db_contenu[$dir];
						} else {
							return(False);
						}
					} else {
						if (isset($sub_array[$dir])) {
							$sub_array = $sub_array[$dir];
						} else {
							return(False);
						}
					}
				}
			}

		} else {
			return(False);
		}

		if (is_array($sub_array)) {
			return(False);
		} else {
			return($sub_array);
		}
		
	} else {
		return(False);
	}
}




/**
* db_get_dir funct.
*
* Query a dir in a database
*
* @param  string 	$db_name 	a database's name
* @param  string 	$path 		path like /dir/dir2/test
* @return array or boolean
*
*/
function db_get_dir($db_name, $path = NULL) {
	if (db_exist($db_name)) {

		$db_contenu = db_get_all($db_name);

		if (is_array($db_contenu)) {
			
			if ($path == NULL) {
				$sub_array = $db_contenu;

			} else {

				if (substr($path, -1) == '/') {
					$path = substr($path, 0, -1);
				}
				if ($path['0'] == '/') {
					$path = substr($path, 1);
				}

				$path = explode('/', $path);
				$sub_array = '';
				foreach ($path as $dir) {

					if (empty($sub_array)) {
						if (isset($db_contenu[$dir])) {
							$sub_array = $db_contenu[$dir];
						} else {
							return(False);
						}
					} else {
						if (isset($sub_array[$dir])) {
							$sub_array = $sub_array[$dir];
						} else {
							return(False);
						}
					}
				}
			}

		} else {
			return(False);
		}

		if (!is_array($sub_array)) {
			return(False);
		} else {
			return($sub_array);
		}
		
	} else {
		return(False);
	}
}




/**
* db_add_value funct.
*
* Add a value in a database
*
* @param  string 	$db_name 	a database's name
* @param  string 	$path 		path like /dir/dir2/test
* @param  string 	$name 		name associated to the value
* @param  string 	$value 		value associated to the name
* @return boolean
*
*/
function db_add_value($db_name, $path = NULL, $name = NULL, $value = NULL) {
	if (db_exist($db_name)) {

		$db_contenu = db_get_all($db_name);

		if (is_array($db_contenu)) {
			
			if ($path == NULL && $name == NULL) {
				$db_contenu[] = $value;

			} elseif ($path == NULL) {
				$db_contenu[$name] = $value;

			} else {

				if (substr($path, -1) == '/') {
					$path = substr($path, 0, -1);
				}
				if ($path['0'] == '/') {
					$path = substr($path, 1);
				}
				if (!$name == NULL) {
					$path .= '/'.$name;
				}

				$path = explode('/', $path);
				$db_gen = &$db_contenu;

				foreach($path as $dir) {
					$db_gen = &$db_gen[$dir];
				}
				$db_gen = $value;
				unset($db_gen);
			}

			file_put_contents(db_sysname($db_name), serialize($db_contenu), LOCK_EX);
			return(True);

		} else {
			return(False);
		}
		
		return(True);
	} else {
		return(False);
	}
}




/**
* db_del_value funct.
*
* Delete a value in a database
*
* @param  string 	$db_name 	a database's name
* @param  string 	$path 		path like /dir/dir2/test
* @param  string 	$name 		name associated to the value
* @return boolean
*
*/
function db_del_value($db_name, $path, $name){
	if (db_exist($db_name)) {

		$db_contenu = db_get_all($db_name);

		if (is_array($db_contenu)) {

			if (substr($path, -1) == '/') {
				$path = substr($path, 0, -1);
			}
			if ($path['0'] == '/') {
				$path = substr($path, 1);
			}

			$path .= '/'.$name;
			$path = explode('/', $path);
			$db_genprev = NULL;
			$db_gen = &$db_contenu;

			foreach ($path as &$dir){
				$db_genprev = &$db_gen;
				
				if (!isset($db_genprev[$dir])) {
					return(False);
				}

				$db_gen = &$db_gen[$dir];
			}

			if (is_array($db_gen)) {
				return(False);
			}

			if ($db_genprev !== NULL) {
				unset($db_genprev[$dir]);
			}

			file_put_contents(db_sysname($db_name), serialize($db_contenu), LOCK_EX);
			return(True);

		} else {
			return(False);
		}

		return(True);
	} else {
		return(False);
	}
}




/**
* db_add_dir funct.
*
* Add a dir in a database
*
* @param  string 	$db_name 	a database's name
* @param  string 	$path 		path like /dir/dir2/test
* @return boolean
*
*/
function db_add_dir($db_name, $path) {
	if (db_exist($db_name)) {

		$db_contenu = db_get_all($db_name);

		if (is_array($db_contenu)) {

			if (substr($path, -1) == '/') {
				$path = substr($path, 0, -1);
			}
			if ($path['0'] == '/') {
				$path = substr($path, 1);
			}

			$path = explode('/', $path);
			$db_gen = &$db_contenu;

			foreach($path as $dir) {
				$db_gen = &$db_gen[$dir];
			}

			unset($db_gen);
			file_put_contents(db_sysname($db_name), serialize($db_contenu), LOCK_EX);
			return(True);

		} else {
			return(False);
		}
		
		return(True);
	} else {
		return(False);
	}
}




/**
* db_del_dir funct.
*
* Delete a dir in a database
*
* @param  string 	$db_name 	a database's name
* @param  string 	$path 		path like /dir/dir2/test
* @return boolean
*
*/
function db_del_dir($db_name, $path){
	if (db_exist($db_name)) {

		$db_contenu = db_get_all($db_name);

		if (is_array($db_contenu)) {

			if (substr($path, -1) == '/') {
				$path = substr($path, 0, -1);
			}
			if ($path['0'] == '/') {
				$path = substr($path, 1);
			}

			$path = explode('/', $path);
			$db_genprev = NULL;
			$db_gen = &$db_contenu;

			foreach ($path as &$dir){
				$db_genprev = &$db_gen;
				
				if (!isset($db_genprev[$dir])) {
					return(False);
				}elseif (!is_array($db_genprev[$dir])) {
					return(False);
				}
				$db_gen = &$db_gen[$dir];
			}

			if ($db_genprev !== NULL) {
				unset($db_genprev[$dir]);
			}

			file_put_contents(db_sysname($db_name), serialize($db_contenu), LOCK_EX);
			return(True);

		} else {
			return(False);
		}

		return(True);
	} else {
		return(False);
	}
}




/**
* db_exist_value funct.
*
* Check if a value exist in a database
*
* @param  string 	$db_name 	a database's name
* @param  string 	$path 		path like /dir/dir2/test
* @param  string 	$name 		name associated to the value
* @return string or boolean
*
*/
function db_exist_value($db_name, $path, $name) {
	if (db_exist_value($db_name, $path)) {
		return(True);
	} else {
		return(False);
	}
}




/**
* db_exist_dir funct.
*
* Check if a dir exist in a database
*
* @param  string 	$db_name 	a database's name
* @param  string 	$path 		path like /dir/dir2/test
* @return array or boolean
*
*/
function db_exist_dir($db_name, $path) {
	if (db_get_dir($db_name, $path)) {
		return(True);
	} else {
		return(False);
	}
}

?>
